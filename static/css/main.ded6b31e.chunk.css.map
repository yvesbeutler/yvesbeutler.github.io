{"version":3,"sources":["main.ded6b31e.chunk.css","Header.scss","../../variables.scss","Footer.scss","App.scss","variables.scss","../node_modules/bootstrap/scss/mixins/_breakpoints.scss"],"names":[],"mappings":"AAAA,oHAAoH,CCEpH,QACI,wBAAyB,CACzB,YAAa,CACb,iBAAkB,CAGtB,SACI,gBAAiB,CACjB,wBAAyB,CACzB,aCXa,CDcjB,MACI,YAAa,CEbjB,QACI,UAAY,CACZ,iBAAkB,CAClB,gBAAiB,CAHrB,WAMQ,cAAe,CANvB,YAUQ,SAAW,CACX,UAAW,CACX,WAAY,CACZ,aAAc,CAbtB,kBAiBQ,YDnBS,CCEjB,oBAqBQ,iBAAkB,CAClB,WAAY,CACZ,UAAW,CACX,aD1BS,CEMjB,KACI,sBAAuB,CACvB,mCAAuC,CAG3C,KACI,QAAS,CAGb,GACI,kCAAsC,CACtC,eAAgB,CAChB,cAAe,CAGnB,QACI,YAAa,CAGjB,SACI,iBAAkB,CAClB,KAAM,CACN,UAAW,CACX,eAAgB,CAOpB,cACI,wBCrCa,CDwCjB,UACI,wBCxCe,CCwEf,4BFjCJ,UAGQ,qBAAsB,CAE7B,CAED,SACI,wBC/Ce","file":"main.ded6b31e.chunk.css","sourcesContent":["@import url(https://fonts.googleapis.com/css?family=Libre+Baskerville:400,700|Playfair+Display:400,700&display=swap);\n.Header {\n  background-color: #292929;\n  height: 100vh;\n  text-align: center; }\n\n.Caption {\n  padding-top: 40px;\n  text-transform: uppercase;\n  color: #FC5162; }\n\n.Logo {\n  height: 200px; }\n\n.Footer {\n  color: white;\n  text-align: center;\n  padding-top: 70px; }\n  .Footer h1 {\n    padding: 0 30px; }\n  .Footer svg {\n    fill: white;\n    width: 40px;\n    height: 40px;\n    margin: 0 10px; }\n  .Footer svg:hover {\n    fill: #FC5162; }\n  .Footer .Copyrights {\n    position: absolute;\n    bottom: 20px;\n    width: 100%;\n    color: #FC5162; }\n\nhtml {\n  scroll-behavior: smooth;\n  font-family: 'Libre Baskerville', serif; }\n\nbody {\n  margin: 0; }\n\nh1 {\n  font-family: 'Playfair Display', serif;\n  font-weight: 500;\n  font-size: 42px; }\n\nsection {\n  height: 100vh; }\n\n.Wrapper {\n  position: relative;\n  top: 0;\n  width: 100%;\n  overflow: hidden; }\n\n.Intro {\n  background-color: #FC5162; }\n\n.About {\n  background-color: #FC5162; }\n\n.Projects {\n  background-color: #292929; }\n  @media (max-width: 767.98px) {\n    .Projects {\n      background-color: blue; } }\n\n.Contact {\n  background-color: #292929; }\n\n","@import \"../../variables.scss\";\n\n.Header {\n    background-color: #292929;\n    height: 100vh;\n    text-align: center;\n}\n\n.Caption {\n    padding-top: 40px;\n    text-transform: uppercase;\n    color: $primary;\n}\n\n.Logo {\n    height: 200px;\n}","$primary: #FC5162;\n$secondary: #292929;","@import \"../../variables.scss\";\n\n.Footer {\n    color: white;\n    text-align: center;\n    padding-top: 70px;\n\n    h1 {\n        padding: 0 30px;\n    }\n\n    svg {\n        fill: white;\n        width: 40px;\n        height: 40px;\n        margin: 0 10px;\n    }\n\n    svg:hover {\n        fill: $primary;\n    }\n\n    .Copyrights {\n        position: absolute;\n        bottom: 20px;\n        width: 100%;\n        color: $primary;\n    }\n}\n\n","@import \"../node_modules/bootstrap/scss/functions\";\n@import \"../node_modules/bootstrap/scss/variables\";\n@import \"../node_modules/bootstrap/scss/mixins/breakpoints\";\n@import \"./variables.scss\";\n@import url('https://fonts.googleapis.com/css?family=Libre+Baskerville:400,700|Playfair+Display:400,700&display=swap');\n\nhtml {\n    scroll-behavior: smooth;\n    font-family: 'Libre Baskerville', serif;\n}\n\nbody {\n    margin: 0;\n}\n\nh1 {\n    font-family: 'Playfair Display', serif;\n    font-weight: 500;\n    font-size: 42px;\n}\n\nsection {\n    height: 100vh;\n}\n\n.Wrapper {\n    position: relative;\n    top: 0;\n    width: 100%;\n    overflow: hidden;\n}\n\n.Intro {\n    background-color: $primary;\n}\n\n.About {\n    background-color: $primary;\n}\n\n.Projects {\n    background-color: $secondary;\n    @include media-breakpoint-down(sm) {\n        background-color: blue;\n    }\n}\n\n.Contact {\n    background-color: $secondary;\n    // height: 50vh;\n}","$primary: #FC5162;\n$secondary: #292929;","// Breakpoint viewport sizes and media queries.\n//\n// Breakpoints are defined as a map of (name: minimum width), order from small to large:\n//\n//    (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px)\n//\n// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.\n\n// Name of the next breakpoint, or null for the last breakpoint.\n//\n//    >> breakpoint-next(sm)\n//    md\n//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    md\n//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl))\n//    md\n@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {\n  $n: index($breakpoint-names, $name);\n  @return if($n != null and $n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);\n}\n\n// Minimum breakpoint width. Null for the smallest (first) breakpoint.\n//\n//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    576px\n@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {\n  $min: map-get($breakpoints, $name);\n  @return if($min != 0, $min, null);\n}\n\n// Maximum breakpoint width. Null for the largest (last) breakpoint.\n// The maximum value is calculated as the minimum of the next one less 0.02px\n// to work around the limitations of `min-` and `max-` prefixes and viewports with fractional widths.\n// See https://www.w3.org/TR/mediaqueries-4/#mq-min-max\n// Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.\n// See https://bugs.webkit.org/show_bug.cgi?id=178261\n//\n//    >> breakpoint-max(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    767.98px\n@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {\n  $next: breakpoint-next($name, $breakpoints);\n  @return if($next, breakpoint-min($next, $breakpoints) - .02, null);\n}\n\n// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash in front.\n// Useful for making responsive utilities.\n//\n//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"\"  (Returns a blank string)\n//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"-sm\"\n@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {\n  @return if(breakpoint-min($name, $breakpoints) == null, \"\", \"-#{$name}\");\n}\n\n// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.\n// Makes the @content apply to the given breakpoint and wider.\n@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  @if $min {\n    @media (min-width: $min) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media of at most the maximum breakpoint width. No query for the largest breakpoint.\n// Makes the @content apply to the given breakpoint and narrower.\n@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {\n  $max: breakpoint-max($name, $breakpoints);\n  @if $max {\n    @media (max-width: $max) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media that spans multiple breakpoint widths.\n// Makes the @content apply between the min and max breakpoints\n@mixin media-breakpoint-between($lower, $upper, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($lower, $breakpoints);\n  $max: breakpoint-max($upper, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($lower, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($upper, $breakpoints) {\n      @content;\n    }\n  }\n}\n\n// Media between the breakpoint's minimum and maximum widths.\n// No minimum for the smallest breakpoint, and no maximum for the largest one.\n// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.\n@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  $max: breakpoint-max($name, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($name, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($name, $breakpoints) {\n      @content;\n    }\n  }\n}\n"]}